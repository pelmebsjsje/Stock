import os
import json
import asyncio
import aiohttp
from datetime import datetime, timedelta
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
STOCK_CHANNEL_ID = os.environ.get('STOCK_CHANNEL_ID', '@autostockgag')
REQUIRED_CHANNELS = [os.environ.get('REQUIRED_CHANNEL', '@autostockgag')]
CHANNEL_LINKS = {'@autostockgag': 'https://t.me/autostockgag'}
STOCK_URL = 'https://www.vulcanvalues.com/grow-a-garden/stock'

USER_PREFS_FILE = "user_prefs.json"
POSTS_DB_FILE = "posted_msgs.json"
LAST_USER_STOCK_FILE = "last_user_stock.json"

SECTION_TITLES = {
    'GEAR STOCK': '–ü—Ä–µ–¥–º–µ—Ç—ã',
    'EGG STOCK': '–Ø–π—Ü–∞',
    'SEEDS STOCK': '–°–µ–º–µ–Ω–∞'
}
SECTION_EMOJI = {
    'GEAR STOCK': 'üõ†Ô∏è',
    'EGG STOCK': 'ü•ö',
    'SEEDS STOCK': 'üå±'
}
SECTION_LIST = ['GEAR STOCK', 'EGG STOCK', 'SEEDS STOCK']

ITEM_TRANSLATE = {
    'Watering Can': '–õ–µ–π–∫–∞',
    'Favorite Tool': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª—é–±–≤–∏',
    'Recall Wrench': '–ö–ª—é—á –≤–æ–∑–≤—Ä–∞—Ç–∞',
    'Trowel': '–°–æ–≤–æ–∫',
    'Basic Sprinkler': '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å',
    'Advanced Sprinkler': '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å',
    'Godly Sprinkler': '–ì–æ–¥–ª–∏ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å',
    'Master Sprinkler': '–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å',
    'Shovel': '–õ–æ–ø–∞—Ç–∞',
    'Lightning Rod': '–ì—Ä–æ–º–æ–≤–æ–¥',
    'Common Egg': '–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ',
    'Uncommon Egg': '–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ',
    'Rare Egg': '–†–µ–¥–∫–æ–µ —è–π—Ü–æ',
    'Bug Egg': '–ë–∞–≥ —è–π—Ü–æ',
    'Legendary Egg': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ',
    'Mythical Egg': '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ',
    'Carrot': '–ú–æ—Ä–∫–æ–≤—å',
    'Strawberry': '–ö–ª—É–±–Ω–∏–∫–∞',
    'Coconut': '–ö–æ–∫–æ—Å',
    'Tomato': '–¢–æ–º–∞—Ç',
    'Blueberry': '–ß–µ—Ä–Ω–∏–∫–∞',
    'Apple': '–Ø–±–ª–æ–∫–æ',
    'Banana': '–ë–∞–Ω–∞–Ω',
    'Pineapple': '–ê–Ω–∞–Ω–∞—Å',
    'Grape': '–í–∏–Ω–æ–≥—Ä–∞–¥',
    'Watermelon': '–ê—Ä–±—É–∑',
    'Peach': '–ü–µ—Ä—Å–∏–∫',
    'Mango': '–ú–∞–Ω–≥–æ',
    'Cherry': '–í–∏—à–Ω—è',
    'Raspberry': '–ú–∞–ª–∏–Ω–∞',
    'Blackberry': '–ï–∂–µ–≤–∏–∫–∞',
    'Pumpkin': '–¢—ã–∫–≤–∞',
    'Eggplant': '–ë–∞–∫–ª–∞–∂–∞–Ω',
    'Corn': '–ö—É–∫—É—Ä—É–∑–∞',
    'Pepper': '–ü–µ—Ä–µ—Ü',
    'Bamboo': '–ë–∞–º–±—É–∫',
    'Cactus': '–ö–∞–∫—Ç—É—Å',
    'Dragon Fruit': '–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç',
    'Mushroom': '–ú—É—Ö–æ–º–æ—Ä',
    'Cacao': '–ö–∞–∫–∞–æ',
    'Beanstalk': '–ë–æ–±—ã',
    'Orange Tulip': '–û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—é–ª—å–ø–∞–Ω',
    'Daffodil': '–ù–∞—Ä—Ü–∏—Å—Å',
}
ITEM_EMOJI = {
    '–õ–µ–π–∫–∞': 'üíß', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª—é–±–≤–∏': 'üíñ', '–ö–ª—é—á –≤–æ–∑–≤—Ä–∞—Ç–∞': 'üîß', '–°–æ–≤–æ–∫': 'ü™£',
    '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üöø', '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üöø',
    '–ì–æ–¥–ª–∏ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üåü', '–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üèÜ', '–õ–æ–ø–∞—Ç–∞': 'üõ†Ô∏è', '–ì—Ä–æ–º–æ–≤–æ–¥': '‚ö°Ô∏è',
    '–ú–æ—Ä–∫–æ–≤—å': 'ü•ï', '–ö–ª—É–±–Ω–∏–∫–∞': 'üçì', '–ö–æ–∫–æ—Å': 'ü••', '–¢–æ–º–∞—Ç': 'üçÖ', '–ß–µ—Ä–Ω–∏–∫–∞': 'ü´ê',
    '–Ø–±–ª–æ–∫–æ': 'üçè', '–ë–∞–Ω–∞–Ω': 'üçå', '–ê–Ω–∞–Ω–∞—Å': 'üçç', '–í–∏–Ω–æ–≥—Ä–∞–¥': 'üçá', '–ê—Ä–±—É–∑': 'üçâ',
    '–ü–µ—Ä—Å–∏–∫': 'üçë', '–ú–∞–Ω–≥–æ': 'ü•≠', '–í–∏—à–Ω—è': 'üçí', '–ú–∞–ª–∏–Ω–∞': 'üçá', '–ï–∂–µ–≤–∏–∫–∞': 'üçá',
    '–¢—ã–∫–≤–∞': 'üéÉ', '–ë–∞–∫–ª–∞–∂–∞–Ω': 'üçÜ', '–ö—É–∫—É—Ä—É–∑–∞': 'üåΩ', '–ü–µ—Ä–µ—Ü': 'üå∂Ô∏è', '–ë–∞–º–±—É–∫': 'üéã',
    '–ö–∞–∫—Ç—É—Å': 'üåµ', '–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç': 'üêâ', '–ú—É—Ö–æ–º–æ—Ä': 'üçÑ', '–ö–∞–∫–∞–æ': 'üç´', '–ë–æ–±—ã': 'üå±',
    '–û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—é–ª—å–ø–∞–Ω': 'üå∑', '–ù–∞—Ä—Ü–∏—Å—Å': 'üåº',
}
EGG_COLOR = {
    '–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ': '‚ö™Ô∏è', '–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ': 'üü§', '–†–µ–¥–∫–æ–µ —è–π—Ü–æ': 'üíô',
    '–ë–∞–≥ —è–π—Ü–æ': 'üü¢', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ': 'üü°', '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ': 'üü•',
}

GEAR_ENG = [
    'Watering Can','Favorite Tool','Recall Wrench','Trowel','Basic Sprinkler','Advanced Sprinkler','Godly Sprinkler','Master Sprinkler','Shovel','Lightning Rod'
]
EGGS_ENG = [
    'Common Egg','Uncommon Egg','Rare Egg','Bug Egg','Legendary Egg','Mythical Egg'
]
SEEDS_ENG = [en for en in ITEM_TRANSLATE if en not in GEAR_ENG+EGGS_ENG]

def load_json_file(path, default):
    if os.path.exists(path):
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return default
    return default

def save_json_file(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_period(section_name):
    now = datetime.now()
    if section_name == 'GEAR STOCK' or section_name == 'SEEDS STOCK':
        minute = now.minute - (now.minute % 5)
        start = now.replace(minute=minute, second=0, microsecond=0)
        end = start + timedelta(minutes=5)
    elif section_name == 'EGG STOCK':
        minute = 0 if now.minute < 30 else 30
        start = now.replace(minute=minute, second=0, microsecond=0)
        end = start + timedelta(minutes=30)
    else:
        start = now
        end = now
    return start.strftime('%H:%M'), end.strftime('%H:%M')

async def fetch_stock():
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(STOCK_URL, timeout=10) as response:
                text = await response.text()
                soup = BeautifulSoup(text, 'html.parser')
                stocks = {}
                for section in SECTION_LIST:
                    stocks[section] = parse_section_stock(soup, section)
                return stocks
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–∫–∞: {e}")
            return {section: [] for section in SECTION_LIST}

def parse_section_stock(soup, section_title):
    section = None
    for h2 in soup.find_all('h2'):
        if h2.get_text(strip=True).upper() == section_title:
            section = h2
            break
    if not section:
        return []
    ul = section.find_next('ul')
    if not ul:
        return []
    items = []
    for li in ul.find_all('li'):
        spans = li.find_all('span')
        if not spans:
            continue
        main_span = spans[0]
        name = main_span.contents[0].strip()
        qty_span = main_span.find('span')
        qty = None
        if qty_span:
            qty = qty_span.get_text(strip=True).replace('x', '')
        for en, ru in ITEM_TRANSLATE.items():
            if name.startswith(en):
                name = name.replace(en, ru, 1)
        emoji = ITEM_EMOJI.get(name, '')
        if name in EGG_COLOR:
            emoji = f"{EGG_COLOR[name]}"
        if qty and qty != "1":
            items.append(f"<b>‚Ä¢</b> {emoji} {name} x{qty}")
        else:
            items.append(f"<b>‚Ä¢</b> {emoji} {name}")
    return items

def make_stock_block(items, section_eng):
    start, end = get_period(section_eng)
    rus_title = SECTION_TITLES.get(section_eng, section_eng)
    emoji = SECTION_EMOJI.get(section_eng, '')
    body = "\n".join(items) if items else ""
    block = (
        f"<b>{emoji} {rus_title.upper()}</b>\n"
        f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> <u>{start}</u> ‚Äî <u>{end}</u>\n"
        f"{body}\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
    )
    return block

def filter_stocks_for_user(stocks, prefs):
    if prefs.get('mode') == 'all':
        return stocks
    chosen_items = prefs.get('chosen_items', {})
    filtered = {}
    for section in SECTION_LIST:
        allowed = set(chosen_items.get(section, []))
        if allowed:
            filtered[section] = [x for x in stocks[section] if any(n in x for n in allowed)]
        else:
            filtered[section] = []
    return filtered

# Telegram bot setup
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# FastAPI app
app = FastAPI()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    update = types.Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ª–æ–≥–∏–∫–∏
async def post_to_telegram(msg, chat_id, reply_markup=None):
    try:
        reply_markup_obj = None
        if reply_markup:
            reply_markup_obj = reply_markup
        await bot.send_message(chat_id, msg, parse_mode="HTML", reply_markup=reply_markup_obj)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

async def stock_poster():
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî prefs/last_user_stock —Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏ –∏ –∏–Ω–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
    user_prefs = load_json_file(USER_PREFS_FILE, {})
    last_user_stock = load_json_file(LAST_USER_STOCK_FILE, {})
    prev_stock = None
    while True:
        stocks = await fetch_stock()
        has_data = any(stocks[section] for section in SECTION_LIST)
        if has_data and stocks != prev_stock:
            msg = (
                "‚ú® –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –°–¢–û–ö Grow a Garden ‚ú®\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                f"{make_stock_block(stocks['GEAR STOCK'], 'GEAR STOCK') if stocks['GEAR STOCK'] else ''}"
                f"{make_stock_block(stocks['EGG STOCK'], 'EGG STOCK') if stocks['EGG STOCK'] else ''}"
                f"{make_stock_block(stocks['SEEDS STOCK'], 'SEEDS STOCK') if stocks['SEEDS STOCK'] else ''}"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                "ü§ç –°–¥–µ–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π @sbtdrasik –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ ü§ç"
            )
            await post_to_telegram(msg, STOCK_CHANNEL_ID)
            # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in list(user_prefs.keys()):
                prefs = user_prefs.get(str(user_id), {'mode': 'all'})
                user_stocks = filter_stocks_for_user(stocks, prefs)
                blocks = []
                for section in SECTION_LIST:
                    if prefs.get("mode") == "all" or user_stocks[section]:
                        blocks.append(make_stock_block(user_stocks[section], section))
                if any(user_stocks[section] for section in SECTION_LIST) or prefs.get("mode") == "all":
                    ls_msg = (
                        "‚ú® –í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–æ–∫–∞: ‚ú®\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
                        "".join(blocks) +
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                        "ü§ç –°–¥–µ–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π @sbtdrasik ü§ç"
                    )
                    if last_user_stock.get(user_id) != ls_msg:
                        await post_to_telegram(ls_msg, user_id)
                        last_user_stock[user_id] = ls_msg
            save_json_file(LAST_USER_STOCK_FILE, last_user_stock)
            prev_stock = stocks
        await asyncio.sleep(60)

@app.on_event("startup")
async def on_startup():
    webhook_url = os.environ.get('WEBHOOK_URL')
    if webhook_url:
        await bot.set_webhook(f"{webhook_url}/webhook")
    asyncio.create_task(stock_poster())  # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–æ–∫–∞

# –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–æ–∫ –≤ –ª–∏—á–∫—É, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))
