import requests
from bs4 import BeautifulSoup
import time
import json
import os
import threading
from datetime import datetime, timedelta

TELEGRAM_BOT_TOKEN = '7658214419:AAEWOkqded6sdSZKKg_pcdT8G9bIEhiDLnI'
STOCK_CHANNEL_ID = '@autostockgag'
GROUP_ID = -4903879365  # –ø–æ—Å—Ç–∞–≤—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–π ID –≥—Ä—É–ø–ø—ã —Å –º–∏–Ω—É—Å–æ–º!
REQUIRED_CHANNELS = ['@autostockgag']
CHANNEL_LINKS = {'@autostockgag': 'https://t.me/autostockgag'}
STOCK_URL = 'https://www.vulcanvalues.com/grow-a-garden/stock'
USER_DB_FILE = 'telegram_users.json'
USER_PREFS_FILE = 'user_prefs.json'
POSTS_DB_FILE = 'posted_msgs.json'
LAST_USER_STOCK_FILE = 'last_user_stock.json'
AUTO_STOCK_FILE = 'auto_stock.json'

SECTION_TITLES = {
    'GEAR STOCK': '–ü—Ä–µ–¥–º–µ—Ç—ã',
    'EGG STOCK': '–Ø–π—Ü–∞',
    'SEEDS STOCK': '–°–µ–º–µ–Ω–∞',
    'HONEY STOCK': '–ú—ë–¥',
    'COSMETIC STOCK': '–ö–æ—Å–º–µ—Ç–∏–∫–∞'
}
SECTION_EMOJI = {
    'GEAR STOCK': 'üõ†Ô∏è',
    'EGG STOCK': 'ü•ö',
    'SEEDS STOCK': 'üå±',
    'HONEY STOCK': 'üçØ',
    'COSMETIC STOCK': 'üé®'
}
SECTION_LIST = ['GEAR STOCK', 'EGG STOCK', 'SEEDS STOCK', 'HONEY STOCK', 'COSMETIC STOCK']

ITEM_TRANSLATE = {
    'Watering Can': '–õ–µ–π–∫–∞', 'Favorite Tool': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∞–≤–æ—Ä–∏—Ç–∞', 'Recall Wrench': '–ö–ª—é—á –≤–æ–∑–≤—Ä–∞—Ç–∞',
    'Trowel': '–°–æ–≤–æ–∫', 'Basic Sprinkler': '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å', 'Advanced Sprinkler': '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å',
    'Godly Sprinkler': '–ì–æ–¥–ª–∏ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å', 'Master Sprinkler': '–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å', 'Shovel': '–õ–æ–ø–∞—Ç–∞',
    'Lightning Rod': '–ì—Ä–æ–º–æ–≤–æ–¥', 'Common Egg': '–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ', 'Uncommon Egg': '–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ', 'Rare Egg': '–†–µ–¥–∫–æ–µ —è–π—Ü–æ',
    'Bug Egg': '–ë–∞–≥ —è–π—Ü–æ', 'Legendary Egg': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ', 'Mythical Egg': '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ', 'Carrot': '–ú–æ—Ä–∫–æ–≤—å',
    'Strawberry': '–ö–ª—É–±–Ω–∏–∫–∞', 'Coconut': '–ö–æ–∫–æ—Å', 'Tomato': '–¢–æ–º–∞—Ç', 'Blueberry': '–ß–µ—Ä–Ω–∏–∫–∞', 'Apple': '–Ø–±–ª–æ–∫–æ',
    'Banana': '–ë–∞–Ω–∞–Ω', 'Pineapple': '–ê–Ω–∞–Ω–∞—Å', 'Grape': '–í–∏–Ω–æ–≥—Ä–∞–¥', 'Watermelon': '–ê—Ä–±—É–∑', 'Peach': '–ü–µ—Ä—Å–∏–∫',
    'Mango': '–ú–∞–Ω–≥–æ', 'Cherry': '–í–∏—à–Ω—è', 'Raspberry': '–ú–∞–ª–∏–Ω–∞', 'Blackberry': '–ï–∂–µ–≤–∏–∫–∞', 'Pumpkin': '–¢—ã–∫–≤–∞',
    'Eggplant': '–ë–∞–∫–ª–∞–∂–∞–Ω', 'Corn': '–ö—É–∫—É—Ä—É–∑–∞', 'Pepper': '–ü–µ—Ä–µ—Ü', 'Bamboo': '–ë–∞–º–±—É–∫', 'Cactus': '–ö–∞–∫—Ç—É—Å',
    'Dragon Fruit': '–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç', 'Mushroom': '–ú—É—Ö–æ–º–æ—Ä', 'Cacao': '–ö–∞–∫–∞–æ', 'Beanstalk': '–ë–æ–±—ã',
    'Orange Tulip': '–û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—é–ª—å–ø–∞–Ω', 'Daffodil': '–ù–∞—Ä—Ü–∏—Å—Å', 'Flower Seed Pack': '–ü–∞–∫–µ—Ç —Å–µ–º—è–Ω —Ü–≤–µ—Ç–æ–≤',
    'Nectarine Seed': '–°–µ–º—è –Ω–µ–∫—Ç–∞—Ä–∏–Ω–∞', 'Hive Fruit Seed': '–°–µ–º—è —É–ª–µ–π–Ω–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞', 'Honey Sprinkler': '–û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å —Å –º—ë–¥–æ–º',
    'Bee Egg': '–Ø–π—Ü–æ –ø—á–µ–ª—ã', 'Bee Crate': '–Ø—â–∏–∫ —Å –ø—á—ë–ª–∞–º–∏', 'Honey Comb': '–°–æ—Ç—ã', 'Honey Torch': '–ú–µ–¥–æ–≤—ã–π —Ñ–∞–∫–µ–ª', 'Ember Lily': '–¢–ª–µ—é—â–∞—è –ª–∏–ª–∏—è'
}
ITEM_EMOJI = {
    '–õ–µ–π–∫–∞': 'üíß', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∞–≤–æ—Ä–∏—Ç–∞': 'üíñ', '–ö–ª—é—á –≤–æ–∑–≤—Ä–∞—Ç–∞': 'üîß', '–°–æ–≤–æ–∫': 'ü™£', '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üöø',
    '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üöø', '–ì–æ–¥–ª–∏ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üåü', '–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å': 'üèÜ', '–õ–æ–ø–∞—Ç–∞': 'üõ†Ô∏è',
    '–ì—Ä–æ–º–æ–≤–æ–¥': '‚ö°Ô∏è', '–ú–æ—Ä–∫–æ–≤—å': 'ü•ï', '–ö–ª—É–±–Ω–∏–∫–∞': 'üçì', '–ö–æ–∫–æ—Å': 'ü••', '–¢–æ–º–∞—Ç': 'üçÖ', '–ß–µ—Ä–Ω–∏–∫–∞': 'ü´ê', '–Ø–±–ª–æ–∫–æ': 'üçè',
    '–ë–∞–Ω–∞–Ω': 'üçå', '–ê–Ω–∞–Ω–∞—Å': 'üçç', '–í–∏–Ω–æ–≥—Ä–∞–¥': 'üçá', '–ê—Ä–±—É–∑': 'üçâ', '–ü–µ—Ä—Å–∏–∫': 'üçë', '–ú–∞–Ω–≥–æ': 'ü•≠', '–í–∏—à–Ω—è': 'üçí',
    '–ú–∞–ª–∏–Ω–∞': 'üçá', '–ï–∂–µ–≤–∏–∫–∞': 'üçá', '–¢—ã–∫–≤–∞': 'üéÉ', '–ë–∞–∫–ª–∞–∂–∞–Ω': 'üçÜ', '–ö—É–∫—É—Ä—É–∑–∞': 'üåΩ', '–ü–µ—Ä–µ—Ü': 'üå∂Ô∏è', '–ë–∞–º–±—É–∫': 'üéã',
    '–ö–∞–∫—Ç—É—Å': 'üåµ', '–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç': 'üêâ', '–ú—É—Ö–æ–º–æ—Ä': 'üçÑ', '–ö–∞–∫–∞–æ': 'üç´', '–ë–æ–±—ã': 'üå±', '–û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—é–ª—å–ø–∞–Ω': 'üå∑',
    '–ù–∞—Ä—Ü–∏—Å—Å': 'üåº', '–ü–∞–∫–µ—Ç —Å–µ–º—è–Ω —Ü–≤–µ—Ç–æ–≤': 'üå∏', '–°–µ–º—è –Ω–µ–∫—Ç–∞—Ä–∏–Ω–∞': 'üçë', '–°–µ–º—è —É–ª–µ–π–Ω–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞': 'üçØ',
    '–û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å —Å –º—ë–¥–æ–º': 'üíß', '–Ø–π—Ü–æ –ø—á–µ–ª—ã': 'üêù', '–Ø—â–∏–∫ —Å –ø—á—ë–ª–∞–º–∏': 'üì¶', '–°–æ—Ç—ã': 'üçØ', '–ú–µ–¥–æ–≤—ã–π —Ñ–∞–∫–µ–ª': 'üî•'
}
EGG_COLOR = {
    '–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ': '‚ö™Ô∏è', '–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ': 'üü§', '–†–µ–¥–∫–æ–µ —è–π—Ü–æ': 'üíô', '–ë–∞–≥ —è–π—Ü–æ': 'üü¢', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ': 'üü°', '–¢–ª–µ—é—â–∞—è –ª–∏–ª–∏—è': 'üå∑üü†', 
    '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ': 'üü•', '–Ø–π—Ü–æ –ø—á–µ–ª—ã': 'üêù'
}
GEAR_ENG = [
    'Watering Can','Favorite Tool','Recall Wrench','Trowel','Basic Sprinkler','Advanced Sprinkler','Godly Sprinkler','Master Sprinkler','Shovel','Lightning Rod'
]
EGGS_ENG = [
    'Common Egg','Uncommon Egg','Rare Egg','Bug Egg','Legendary Egg','Mythical Egg','Bee Egg'
]
HONEY_ENG = [
    'Flower Seed Pack', 'Nectarine Seed', 'Hive Fruit Seed', 'Honey Sprinkler', 'Bee Egg',
    'Bee Crate', 'Honey Comb', 'Honey Torch'
]
SEEDS_ENG = [en for en in ITEM_TRANSLATE if en not in GEAR_ENG + EGGS_ENG + HONEY_ENG]

def ru_translate(text):
    tr = {
        'Hat': '–®–∞–ø–∫–∞', 'Cape': '–ü–ª–∞—â', 'Wings': '–ö—Ä—ã–ª—å—è', 'Dress': '–ü–ª–∞—Ç—å–µ', 'Crown': '–ö–æ—Ä–æ–Ω–∞',
        'Scarf': '–®–∞—Ä—Ñ', 'Mask': '–ú–∞—Å–∫–∞', 'Glasses': '–û—á–∫–∏', 'Token': '–¢–æ–∫–µ–Ω', 'Crate': '–°—É–Ω–¥—É–∫',
        'Dye': '–ö—Ä–∞—Å–∫–∞', 'Flower': '–¶–≤–µ—Ç–æ–∫', 'Bee': '–ü—á–µ–ª–∞', 'Honey': '–ú—ë–¥', 'Sunflower': '–ü–æ–¥—Å–æ–ª–Ω—É—Ö', 'Nectar': '–ù–µ–∫—Ç–∞—Ä'
    }
    for k, v in tr.items():
        text = text.replace(k, v)
    return text

def load_json_file(path, default):
    if os.path.exists(path):
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return default
    return default

def save_json_file(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_updates(offset=None):
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates'
    params = {'timeout': 10}
    if offset:
        params['offset'] = offset
    try:
        resp = requests.get(url, params=params, timeout=15)
        return resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {}

def delete_telegram_message(chat_id, message_id):
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteMessage'
    payload = {'chat_id': chat_id, 'message_id': message_id}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def make_stock_block(items, section_eng):
    start, end = get_period(section_eng)
    rus_title = SECTION_TITLES.get(section_eng, section_eng)
    emoji = SECTION_EMOJI.get(section_eng, '')
    body = "\n".join(items) if items else ""
    block = (
        f"<b>{emoji} {rus_title.upper()}</b>\n"
        f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> <u>{start}</u> ‚Äî <u>{end}</u>\n"
        f"{body}\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
    )
    return block

def parse_section_stock(soup, section_title):
    section = None
    if section_title == "HONEY STOCK":
        for h2 in soup.find_all('h2'):
            if "HONEY" in h2.get_text(strip=True).upper() or "–ú–Å–î" in h2.get_text(strip=True).upper():
                section = h2
                break
    elif section_title == "COSMETIC STOCK":
        for h2 in soup.find_all('h2'):
            if "COSMETIC" in h2.get_text(strip=True).upper() or "–ö–û–°–ú–ï–¢–ò–ö–ê" in h2.get_text(strip=True).upper():
                section = h2
                break
    else:
        for h2 in soup.find_all('h2'):
            if h2.get_text(strip=True).upper() == section_title:
                section = h2
                break
    if not section:
        return []
    ul = section.find_next('ul')
    if not ul:
        return []
    items = []
    for li in ul.find_all('li'):
        spans = li.find_all('span')
        if not spans:
            continue
        main_span = spans[0]
        name = main_span.contents[0].strip()
        qty_span = main_span.find('span')
        qty = None
        if qty_span:
            qty = qty_span.get_text(strip=True).replace('x', '')
        if section_title == "COSMETIC STOCK":
            rus = ru_translate(name)
            emoji = "üé®"
            text = f"{emoji} {rus}"
        else:
            rus = ITEM_TRANSLATE.get(name, name)
            emoji = ITEM_EMOJI.get(rus, '')
            text = f"{emoji} {rus}".strip()
        if name in EGG_COLOR:
            text = f"{EGG_COLOR[name]} {rus}"
        if qty and qty != "1":
            items.append(f"<b>‚Ä¢</b> {text} x{qty}")
        else:
            items.append(f"<b>‚Ä¢</b> {text}")
    return items

def get_stock():
    try:
        response = requests.get(STOCK_URL, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        stocks = {}
        for section in SECTION_LIST:
            stocks[section] = parse_section_stock(soup, section)
        return stocks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–∫–∞: {e}")
        return {section: [] for section in SECTION_LIST}

def post_to_telegram(msg, chat_id, reply_markup=None):
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': msg,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    try:
        resp = requests.post(url, data=payload)
        res = resp.json()
        if res.get("ok") and "result" in res:
            return res["result"]["message_id"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    return None

def check_subscription(user_id):
    for channel in REQUIRED_CHANNELS:
        url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getChatMember'
        params = {'chat_id': channel, 'user_id': user_id}
        try:
            resp = requests.get(url, params=params, timeout=10).json()
            if not resp.get('ok') or resp['result']['status'] not in ['member', 'administrator', 'creator']:
                return False
        except Exception:
            return False
    return True

def send_subscription_message(user_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ autostockgag", "url": CHANNEL_LINKS['@autostockgag']}],
            [{"text": "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "callback_data": "checksub"}]
        ]
    }
    msg = (
        "üëã <b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:</b>\n"
        f"1Ô∏è‚É£ <a href='{CHANNEL_LINKS['@autostockgag']}'>@autostockgag</a>\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª."
    )
    post_to_telegram(msg, user_id, reply_markup=keyboard)

def send_reply_menu(user_id):
    reply_markup = {
        "keyboard": [
            ["–í–µ—Å—å —Å—Ç–æ–∫ üìù"],
            ["–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω–æ ‚öôÔ∏è"],
            ["–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ üì¶"],
            ["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    msg = (
        "üîî <b>–ß—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ –ª–∏—á–∫—É?</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–í–µ—Å—å —Å—Ç–æ–∫</b> ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—Å—ë, –∏–ª–∏ <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω–æ</b> ‚Äî —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã/—Å–µ–º–µ–Ω–∞/—è–π—Ü–∞.\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"
    )
    post_to_telegram(msg, user_id, reply_markup=reply_markup)

def send_section_choose(user_id):
    reply_markup = {
        "keyboard": [
            ["–°–µ–º–µ–Ω–∞ üå±", "–ü—Ä–µ–¥–º–µ—Ç—ã üõ†Ô∏è", "–Ø–π—Ü–∞ ü•ö", "–ú—ë–¥ üçØ"],
            ["‚¨ÖÔ∏è –í –º–µ–Ω—é"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    msg = "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    post_to_telegram(msg, user_id, reply_markup=reply_markup)

def send_item_choose_menu(user_id, section, user_prefs):
    if section == "GEAR STOCK":
        items = [ITEM_TRANSLATE[en] for en in GEAR_ENG if en in ITEM_TRANSLATE]
    elif section == "SEEDS STOCK":
        items = [ITEM_TRANSLATE[en] for en in SEEDS_ENG if en in ITEM_TRANSLATE]
    elif section == "EGG STOCK":
        items = [ITEM_TRANSLATE[en] for en in EGGS_ENG if en in ITEM_TRANSLATE]
    elif section == "HONEY STOCK":
        items = [ITEM_TRANSLATE[en] for en in HONEY_ENG if en in ITEM_TRANSLATE]
    else:
        items = []
    chosen = set(user_prefs.get(user_id, {}).get('chosen_items', {}).get(section, []))
    keyboard = []
    for name in sorted(items):
        checked = "‚úÖ" if name in chosen else ""
        keyboard.append([f"{name}{checked}"])  # <-- –û–î–ù–ê –∫–Ω–æ–ø–∫–∞ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard.append(["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", "‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"])
    reply_markup = {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    msg = f"–û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´{SECTION_TITLES[section]}¬ª (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
    post_to_telegram(msg, user_id, reply_markup=reply_markup)

def get_auto_stock_status():
    auto_stock = load_json_file(AUTO_STOCK_FILE, {"enabled": True})
    return auto_stock.get("enabled", True)

def set_auto_stock_status(enabled: bool):
    save_json_file(AUTO_STOCK_FILE, {"enabled": enabled})

def send_settings_menu(user_id):
    auto_stock_enabled = get_auto_stock_status()
    status = "üü¢ –í–∫–ª—é—á–µ–Ω" if auto_stock_enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
    keyboard = [
        [
            {"text": "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ —Å—Ç–æ–∫ ‚úÖ", "callback_data": "auto_stock_on"},
            {"text": "–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ —Å—Ç–æ–∫ ‚ùå", "callback_data": "auto_stock_off"}
        ],
        [
            {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}
        ]
    ]
    reply_markup = {"inline_keyboard": keyboard}
    msg = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ê–≤—Ç–æ —Å—Ç–æ–∫: <b>{status}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    post_to_telegram(msg, user_id, reply_markup=reply_markup)

# --- –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú ---
massmail_state = {
    "waiting": False,
    "confirm": False,
    "from_user": None,
    "from_group": None,
    "pending_message_id": None
}

def send_massmail_confirm_buttons(chat_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "callback_data": "massmail_confirm"}],
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "massmail_cancel"}]
        ]
    }
    post_to_telegram(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ <b>–û—Ç–º–µ–Ω–∞</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        chat_id,
        reply_markup=keyboard
    )

def handle_callback_query(callback_query, user_ids, user_prefs):
    global massmail_state
    user_id = str(callback_query['from']['id'])
    data = callback_query['data']
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if data == "auto_stock_on":
        set_auto_stock_status(True)
        post_to_telegram("‚úÖ –ê–≤—Ç–æ —Å—Ç–æ–∫ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω.", user_id)
        send_settings_menu(user_id)
    elif data == "auto_stock_off":
        set_auto_stock_status(False)
        post_to_telegram("‚ùå –ê–≤—Ç–æ —Å—Ç–æ–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–∫–ª—é—á–µ–Ω.", user_id)
        send_settings_menu(user_id)
    elif data == "back_to_menu":
        send_reply_menu(user_id)
    elif data == "checksub":
        if check_subscription(user_id):
            user_ids.add(user_id)
            save_json_file(USER_DB_FILE, list(user_ids))
            send_reply_menu(user_id)
        else:
            post_to_telegram("‚ùóÔ∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.", user_id)
    elif data == "massmail_confirm" and massmail_state["confirm"]:
        count_sent = 0
        for uid in user_ids:
            try:
                forward_url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/forwardMessage'
                payload = {
                    'chat_id': uid,
                    'from_chat_id': massmail_state["from_group"],
                    'message_id': massmail_state["pending_message_id"]
                }
                requests.post(forward_url, data=payload)
                count_sent += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        post_to_telegram(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", massmail_state["from_group"])
        massmail_state.update({"waiting": False, "confirm": False, "from_user": None, "from_group": None, "pending_message_id": None})
    elif data == "massmail_cancel" and massmail_state["confirm"]:
        post_to_telegram("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", massmail_state["from_group"])
        massmail_state.update({"waiting": False, "confirm": False, "from_user": None, "from_group": None, "pending_message_id": None})

def process_group_command(message, user_ids):
    global massmail_state
    chat_id = message['chat']['id']
    text = message.get('text', '').strip() if 'text' in message else ""
    from_user = message['from']['id']

    if text == '/users':
        count = len(user_ids)
        post_to_telegram(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <b>{count}</b>", chat_id)
    elif text == '/rasik':
        massmail_state.update({
            "waiting": True,
            "confirm": False,
            "from_user": from_user,
            "from_group": chat_id,
            "pending_message_id": None
        })
        post_to_telegram(
            "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/—Ñ–∞–π–ª/—Ç–≥ –ø–æ—Å—Ç)</b> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–ë—É–¥–µ—Ç –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ! –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            chat_id
        )
    elif massmail_state["waiting"] and from_user == massmail_state["from_user"] and chat_id == massmail_state["from_group"]:
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        massmail_state.update({
            "waiting": False,
            "confirm": True,
            "pending_message_id": message['message_id']
        })
        send_massmail_confirm_buttons(chat_id)

def process_user_menu(message, user_ids, user_prefs):
    user_id = str(message['from']['id'])
    text = message.get('text', '').strip() if 'text' in message else ""
    if user_id not in user_ids:
        send_subscription_message(user_id)
        return
    prefs = user_prefs.get(user_id, {})
    if text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ üì¶":
        stocks = get_stock()
        if not any(stocks[section] for section in SECTION_LIST):
            post_to_telegram(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞. –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ —É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ!",
                user_id
            )
        else:
            blocks = [
                make_stock_block(stocks[section], section) for section in SECTION_LIST if stocks[section]
            ]
            msg = (
                "‚ú® –°–µ–π—á–∞—Å –Ω–∞ —Å—Ç–æ–∫–µ:\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                + "".join(blocks)
                + "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            post_to_telegram(msg, user_id)
        send_reply_menu(user_id)
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è":
        send_settings_menu(user_id)
    elif text == "–í–µ—Å—å —Å—Ç–æ–∫ üìù":
        user_prefs[user_id] = {"mode": "all"}
        save_json_file(USER_PREFS_FILE, user_prefs)
        post_to_telegram("‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–µ—Å—å —Å—Ç–æ–∫!", user_id)
        send_reply_menu(user_id)
    elif text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω–æ ‚öôÔ∏è":
        user_prefs[user_id] = {"mode": "custom", "chosen_items": {}}
        save_json_file(USER_PREFS_FILE, user_prefs)
        send_section_choose(user_id)
    elif text == "–°–µ–º–µ–Ω–∞ üå±":
        send_item_choose_menu(user_id, "SEEDS STOCK", user_prefs)
    elif text == "–ü—Ä–µ–¥–º–µ—Ç—ã üõ†Ô∏è":
        send_item_choose_menu(user_id, "GEAR STOCK", user_prefs)
    elif text == "–Ø–π—Ü–∞ ü•ö":
        send_item_choose_menu(user_id, "EGG STOCK", user_prefs)
    elif text == "–ú—ë–¥ üçØ":
        send_item_choose_menu(user_id, "HONEY STOCK", user_prefs)
    elif text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        send_reply_menu(user_id)
    elif text == "‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π":
        send_section_choose(user_id)
    elif text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä":
        send_section_choose(user_id)
    else:
        for section, items_eng in [
            ("GEAR STOCK", GEAR_ENG),
            ("SEEDS STOCK", SEEDS_ENG),
            ("EGG STOCK", EGGS_ENG),
            ("HONEY STOCK", HONEY_ENG)
        ]:
            items = [ITEM_TRANSLATE[en] for en in items_eng if en in ITEM_TRANSLATE]
            name = text.replace("‚úÖ", "")
            if name in items:
                prefs = user_prefs.setdefault(user_id, {"mode": "custom", "chosen_items": {}})
                chosen = set(prefs.setdefault("chosen_items", {}).get(section, []))
                if name in chosen:
                    chosen.remove(name)
                else:
                    chosen.add(name)
                prefs["chosen_items"][section] = list(chosen)
                user_prefs[user_id] = prefs
                save_json_file(USER_PREFS_FILE, user_prefs)
                send_item_choose_menu(user_id, section, user_prefs)
                return
        send_reply_menu(user_id)

def get_period(section_name):
    now = datetime.now()
    if section_name in ['GEAR STOCK', 'SEEDS STOCK', 'HONEY STOCK']:
        if section_name == 'HONEY STOCK':
            start = now.replace(minute=0, second=0, microsecond=0)
            end = start + timedelta(minutes=30)
        else:
            minute = now.minute - (now.minute % 5)
            start = now.replace(minute=minute, second=0, microsecond=0)
            end = start + timedelta(minutes=5)
    elif section_name == 'EGG STOCK':
        minute = 0 if now.minute < 30 else 30
        start = now.replace(minute=minute, second=0, microsecond=0)
        end = start + timedelta(minutes=30)
    elif section_name == 'COSMETIC STOCK':
        hour = (now.hour // 4) * 4
        start = now.replace(hour=hour, minute=0, second=0, microsecond=0)
        end = start + timedelta(hours=4)
    else:
        start = now
        end = now
    return start.strftime('%H:%M'), end.strftime('%H:%M')

def filter_stocks_for_user(stocks, prefs):
    if prefs.get('mode') == 'all':
        return stocks
    chosen_items = prefs.get('chosen_items', {})
    filtered = {}
    for section in SECTION_LIST:
        allowed = set(chosen_items.get(section, []))
        if allowed:
            filtered[section] = [x for x in stocks[section] if any(n in x for n in allowed)]
        else:
            filtered[section] = []
    return filtered

def only_own_channel_posts(new_msg_id):
    posts = load_json_file(POSTS_DB_FILE, [])
    for post in list(posts):
        if post['msg_id'] != new_msg_id:
            delete_telegram_message(STOCK_CHANNEL_ID, post['msg_id'])
            posts.remove(post)
    posts = [p for p in posts if p['msg_id'] == new_msg_id]
    save_json_file(POSTS_DB_FILE, posts)

def user_listener(user_ids, user_prefs):
    last_update_id = None
    while True:
        updates = get_updates(last_update_id)
        if updates and 'result' in updates:
            for upd in updates['result']:
                last_update_id = upd['update_id'] + 1
                if 'message' in upd:
                    msg = upd['message']
                    if 'chat' in msg and (msg['chat']['type'] == 'group' or msg['chat']['type'] == 'supergroup') and msg['chat']['id'] == GROUP_ID:
                        process_group_command(msg, user_ids)
                    elif msg['chat']['type'] == 'private':
                        process_user_menu(msg, user_ids, user_prefs)
                elif 'callback_query' in upd:
                    callback = upd['callback_query']
                    handle_callback_query(callback, user_ids, user_prefs)
        time.sleep(2)

def main():
    user_ids = set(load_json_file(USER_DB_FILE, []))
    user_prefs = load_json_file(USER_PREFS_FILE, {})
    last_user_stock = load_json_file(LAST_USER_STOCK_FILE, {})
    threading.Thread(target=user_listener, args=(user_ids, user_prefs), daemon=True).start()
    prev_stock = None
    stock_error = False
    while True:
        try:
            auto_stock_enabled = get_auto_stock_status()
            if not auto_stock_enabled:
                time.sleep(30)
                continue
            stocks = get_stock()
            has_data = any(stocks[section] for section in SECTION_LIST)
            if not has_data:
                if not stock_error:
                    for user_id in list(user_ids):
                        post_to_telegram(
                            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!\n"
                            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞. –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ —É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ!",
                            user_id
                        )
                    stock_error = True
                prev_stock = stocks
                time.sleep(60)
                continue
            else:
                if stock_error:
                    stock_error = False
            if stocks != prev_stock:
                msg = (
                    "‚ú® –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –°–¢–û–ö Grow a Garden ‚ú®\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                    f"{make_stock_block(stocks['GEAR STOCK'], 'GEAR STOCK') if stocks['GEAR STOCK'] else ''}"
                    f"{make_stock_block(stocks['EGG STOCK'], 'EGG STOCK') if stocks['EGG STOCK'] else ''}"
                    f"{make_stock_block(stocks['SEEDS STOCK'], 'SEEDS STOCK') if stocks['SEEDS STOCK'] else ''}"
                    f"{make_stock_block(stocks['HONEY STOCK'], 'HONEY STOCK') if stocks['HONEY STOCK'] else ''}"
                    f"{make_stock_block(stocks['COSMETIC STOCK'], 'COSMETIC STOCK') if stocks['COSMETIC STOCK'] else ''}"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    "ü§ç –°–¥–µ–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π @sbtdrasik –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ ü§ç"
                )
                msg_id = post_to_telegram(msg, STOCK_CHANNEL_ID)
                if msg_id:
                    posts = load_json_file(POSTS_DB_FILE, [])
                    posts.append({'msg_id': msg_id, 'timestamp': time.time()})
                    save_json_file(POSTS_DB_FILE, posts)
                    only_own_channel_posts(msg_id)
                for user_id in list(user_ids):
                    prefs = user_prefs.get(str(user_id), {'mode': 'all'})
                    user_stocks = filter_stocks_for_user(stocks, prefs)
                    blocks = []
                    for section in SECTION_LIST:
                        if prefs.get("mode") == "all" or user_stocks[section]:
                            blocks.append(make_stock_block(user_stocks[section], section))
                    if any(user_stocks[section] for section in SECTION_LIST) or prefs.get("mode") == "all":
                        ls_msg = (
                            "‚ú® –í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–æ–∫–∞: ‚ú®\n"
                            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
                            "".join(blocks) +
                            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                            "ü§ç –°–¥–µ–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π @sbtdrasik ü§ç"
                        )
                        if last_user_stock.get(user_id) != ls_msg:
                            post_to_telegram(ls_msg, user_id)
                            last_user_stock[user_id] = ls_msg
                            save_json_file(LAST_USER_STOCK_FILE, last_user_stock)
                prev_stock = stocks
        except Exception as e:
            print(f"Error: {e}")
        time.sleep(60)

if __name__ == "__main__":
    main()